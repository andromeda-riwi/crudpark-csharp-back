// <auto-generated />
using System;
using CrudPark.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CrudPark.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConfiguracionSistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TarifaActivaId")
                        .HasColumnType("integer")
                        .HasColumnName("tarifa_activa_id");

                    b.HasKey("Id");

                    b.HasIndex("TarifaActivaId");

                    b.ToTable("ConfiguracionSistema");
                });

            modelBuilder.Entity("CrudPark.Api.Models.Operador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<DateTimeOffset>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id");

                    b.ToTable("Operadores");
                });

            modelBuilder.Entity("CrudPark.Api.Models.Pago", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("FechaPago")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Metodo")
                        .HasColumnType("integer");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<long>("OperadorId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OperadorId");

                    b.HasIndex("TicketId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("CrudPark.Api.Models.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("FechaIngreso")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FechaSalida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("MensualidadId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("MontoPagado")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<long>("OperadorIngresoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OperadorSalidaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MensualidadId");

                    b.HasIndex("OperadorIngresoId");

                    b.HasIndex("OperadorSalidaId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Mensualidad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("CorreoCliente")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("correo_cliente");

                    b.Property<DateTimeOffset?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTimeOffset>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateOnly>("FechaFin")
                        .HasColumnType("date")
                        .HasColumnName("fecha_fin");

                    b.Property<DateOnly>("FechaInicio")
                        .HasColumnType("date")
                        .HasColumnName("fecha_inicio");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("nombre_cliente");

                    b.Property<string>("PlacaVehiculo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("placa_vehiculo");

                    b.HasKey("Id");

                    b.ToTable("Mensualidades");
                });

            modelBuilder.Entity("TarifaCatalogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<int>("TiempoGraciaMinutos")
                        .HasColumnType("integer")
                        .HasColumnName("tiempo_gracia_minutos");

                    b.Property<decimal>("TopeDiario")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("tope_diario");

                    b.Property<decimal>("ValorFraccion")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("valor_fraccion");

                    b.Property<decimal>("ValorHora")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("valor_hora");

                    b.HasKey("Id");

                    b.ToTable("TarifasCatalogo");
                });

            modelBuilder.Entity("ConfiguracionSistema", b =>
                {
                    b.HasOne("TarifaCatalogo", "TarifaActiva")
                        .WithMany()
                        .HasForeignKey("TarifaActivaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TarifaActiva");
                });

            modelBuilder.Entity("CrudPark.Api.Models.Pago", b =>
                {
                    b.HasOne("CrudPark.Api.Models.Operador", "Operador")
                        .WithMany()
                        .HasForeignKey("OperadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrudPark.Api.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operador");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CrudPark.Api.Models.Ticket", b =>
                {
                    b.HasOne("Mensualidad", "Mensualidad")
                        .WithMany()
                        .HasForeignKey("MensualidadId");

                    b.HasOne("CrudPark.Api.Models.Operador", "OperadorIngreso")
                        .WithMany()
                        .HasForeignKey("OperadorIngresoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrudPark.Api.Models.Operador", "OperadorSalida")
                        .WithMany()
                        .HasForeignKey("OperadorSalidaId");

                    b.Navigation("Mensualidad");

                    b.Navigation("OperadorIngreso");

                    b.Navigation("OperadorSalida");
                });
#pragma warning restore 612, 618
        }
    }
}
